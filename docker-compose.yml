version: '3.4'
services:
  db:
    container_name: postgres
    image: postgres:11.2-alpine
    restart: always
    env_file:
      - production.env
    ports:
      - 5432:5432
    networks:
      - SIGS_production
    volumes:
      - prod-postgres-data:/var/lib/postgresql/data

  sigs:
    container_name: sigs
    image: projetosigs/sigs-gces:stable
    env_file:
      - production.env
    volumes:
      - .:/sigs
    ports:
      - "3000:3000"
    links:  
      - db
    depends_on:
      - db
    networks:
      - SIGS_production
  
  nginx:
    container_name: nginx
    image: nginx:1.15
    restart: always
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - production.env
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - sigs-public:/sigs/public
      - sigs-log:/sigs/log
    depends_on:
      - sigs
    networks:
      - SIGS_production
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  watchtower:
    container_name: watchtower
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - SIGS_production

volumes:
  prod-postgres-data: {}
  sigs-public:
  sigs-log:

networks:
  SIGS_production:
    driver: bridge
